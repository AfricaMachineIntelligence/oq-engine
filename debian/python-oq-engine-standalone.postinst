#!/bin/sh
# postinst script for python-oq-engine-standalone
#
# see: dh_installdeb(1)

#set -x
set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# load debconf suite
. /usr/share/debconf/confmodule

GEM_DEB_PACKAGE="python-oq-engine-standalone"
PG_CONF="/etc/postgresql/9.1/main/postgresql.conf"
SDIR=/etc/openquake/engine
IDIR=/usr/share/pyshared/openquake/engine

if ps ax | grep -v grep | grep -q -w '/usr/bin/python -m celery.bin.celeryd'; then
    echo
    echo "You must stop celeryd daemon to upgrade $GEM_DEB_PACKAGE"
    echo
    db_stop
    exit 1
fi

# create rabbitmq configuration for python-celery
celeryuser_count=$(rabbitmqctl list_users | grep celeryuser | wc -l)
if [ $celeryuser_count -eq 0 ]; then
    rabbitmqctl add_user celeryuser celery
fi
celeryvhost_count=$(rabbitmqctl list_vhosts | grep celeryvhost | wc -l)
if [ $celeryvhost_count -eq 0 ]; then
    rabbitmqctl add_vhost celeryvhost
    rabbitmqctl set_permissions -p celeryvhost celeryuser ".*" ".*" ".*"
fi

chown -R root.openquake $SDIR

#
#  NOTE
#        look 'debian/config' file if you want to change something here
#

# does a bad explicit configuration exist?
if grep -q '^[ 	]*standard_conforming_strings[ 	]*=' "$PG_CONF" ; then
    if grep -q '^[ 	]*standard_conforming_strings[ 	]*=[ 	]*on' "$PG_CONF" ; then
        db_get ${GEM_DEB_PACKAGE}/override-psql-std-conf-str || true
        if [ "$RET" = "true" ]; then
            if [ ! -f "${PG_CONF}.${GEM_DEB_PACKAGE}.orig" ]; then
                cp "$PG_CONF" "${PG_CONF}.${GEM_DEB_PACKAGE}.orig"
            fi
            sed -i 's/^[ 	]*standard_conforming_strings[ 	]*=.*/# ADDED BY python-oq-engine\nstandard_conforming_strings = off/g' "$PG_CONF"
        fi
    fi
elif grep -q  '^[ 	]*#[ 	]*standard_conforming_strings[ 	]*=' "$PG_CONF" ; then
    if [ ! -f "${PG_CONF}.${GEM_DEB_PACKAGE}.orig" ]; then
        cp "$PG_CONF" "${PG_CONF}.${GEM_DEB_PACKAGE}.orig"
    fi
    sed -i 's/^[ 	]*#[ 	]*standard_conforming_strings[ 	]*=.*/# ADDED BY python-oq-engine\nstandard_conforming_strings = off/g' "$PG_CONF"
else
    if [ ! -f "${PG_CONF}.${GEM_DEB_PACKAGE}.orig" ]; then
        cp "$PG_CONF" "${PG_CONF}.${GEM_DEB_PACKAGE}.orig"
    fi
    echo "# ADDED BY python-oq-engine" >>  "$PG_CONF"
    echo "standard_conforming_strings = off" >>  "$PG_CONF"
fi

# postgres is installed by definition (depends), flatten and recreate the database.
pgport=$(cat /etc/postgresql/9.1/main/postgresql.conf | perl -wane ' if ($_ =~ /^\s*port\s*=/) { s/^\s*port\s*=\s*(\d+).*$/$1/; print $_; }')
LOGFILE=/var/tmp/openquake-db-installation
rm -f $LOGFILE
su -c "/usr/bin/oq_create_db --yes --db-name=openquake2 --db-port=$pgport > $LOGFILE 2>&1" postgres
for dbu in oq_admin oq_job_init; do
    su -c "psql -p $pgport -c \"ALTER ROLE $dbu WITH PASSWORD 'openquake'\" >> $LOGFILE 2>&1" postgres
done
chmod 644 $LOGFILE

num_of_errors=$(grep -i error $LOGFILE | grep -v "is not empty" | grep -v error_msg_ | grep -v ON_ERROR_STOP | wc -l)
if [ $num_of_errors -gt 0 ]; then
    echo "Failed to initialise the openquake database"
    echo "Please file a bug here:"
    echo "    https://bugs.launchpad.net/openquake/+filebug"
    echo "and attach this file to it:"
    echo "    $LOGFILE"
    db_stop
    exit 1
fi

PG_ROOT=/etc/postgresql/9.1/main
# Do we already have oq_* database users configured and how many?
oq_config_lines=$(grep oq_ $PG_ROOT/pg_hba.conf | grep -v '^#' | wc -l)
# Do we already have oq_* database users *auto-configured* and how many?
auto_oq_config_lines=$(grep oq_ $PG_ROOT/pg_hba.conf | grep -v '^#' | grep '^local' | wc -l)
if [ $oq_config_lines -eq $auto_oq_config_lines ]; then
    # The oq_* db users (if any) have been auto-configured i.e. it's OK
    # if we flatten them.
    rm -f $PG_ROOT/pg_hba.conf.orig
    mv $PG_ROOT/pg_hba.conf $PG_ROOT/pg_hba.conf.orig
    cat $PG_ROOT/pg_hba.conf.orig | grep -v 'local..*oq_' > $PG_ROOT/pg_hba.conf
    for dbu in oq_job_init oq_admin; do
        sed -i "0,/\(^[  ]*[^#]\+\)/{s/\(^[        ]*[^#]\+\)/local   openquake2   $dbu                   md5\n\1/}" $PG_ROOT/pg_hba.conf
    done
    /etc/init.d/postgresql reload 9.1
else
    echo ""
    echo "============================================================"
    echo "Your system seems to have a custom pg_hba.conf (postgres"
    echo "authentication configuration)"
    echo ""
    echo "Please ask the system administrator to grant access to the"
    echo "'openquake' database to the following users:"
    echo ""
    echo "      oq_admin oq_job_init"
    echo "============================================================"
    echo ""
fi

# if celeryd default file exists then extract user and group and create them if not already exists
if [ -f /etc/default/celeryd ]; then
    . /etc/default/celeryd

    if [ $(cat /etc/passwd | grep "^$CELERYD_USER:" | wc -l) -eq 0 ]; then
        adduser --system "$CELERYD_USER"
    fi
    if [ $(cat /etc/group | grep "^$CELERYD_GROUP:" | wc -l) -eq 0 ]; then
        addgroup --system "$CELERYD_GROUP"
    fi
fi

# Start celeryd
/etc/init.d/celeryd start

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

db_stop
exit 0
